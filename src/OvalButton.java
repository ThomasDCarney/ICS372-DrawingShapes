/**
 * Class: ICS 372 - Object Oriented Design and Implementation <br>
 * Instructor: Habtamu Bogale <br>
 * Description: Group Project #3, A simple drawing program. <br>
 * Due: 12/04/2015 <br><br>
 * 
 * This is a button displayed by the GUI and used to create a Oval object. This is a JButton
 * and also extends ActionListener as the actionPerformed method is part of the class. There is 
 * also an inside class used to process mouse clicks once the button is pushed in order to flesh 
 * out the item.
 * 
 * @author Jacob Mathias, Ghislain Ndike, Andrea Deerberg, Tom Carney
 * @version 1.0
 * @since 11/23/2015
 */

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JButton;
import javax.swing.JPanel;

public class OvalButton extends JButton implements ActionListener {

    protected JPanel drawingPanel;
    protected View view;
    private MouseHandler mouseHandler;
    
    /**
     * This will create a new button, starting off the process of creating
     * Oval objects.
     * 
     * @param jFrame - The frame where the button is located.
     * 
     * @param jPanel - The panel used as a canvas where mouse clicks occur.
     */
    public OvalButton(View jFrame, JPanel jPanel) {
        
        super("Oval");
        addActionListener(this);
        view = jFrame;
        drawingPanel = jPanel;
        
    } // end OvalButton constructor
    
    
    /**
     * Handles the click to create a new Oval.
     * 
     * @param - The event generated by pushing the button.
     */
    public void actionPerformed(ActionEvent e) {
        
        drawingPanel.setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
        mouseHandler = new MouseHandler();
        drawingPanel.addMouseListener(mouseHandler);
        
        // Following existing code, creating object prior to fleshing it out with vertices. 
        Controller.instance().makeOval();
        
    } // end actionPerformed
    
    
    /**
     * Handles mouse click so that the points can now be captured.
     */
    private class MouseHandler extends MouseAdapter {
      
        private int pointCount;
        
        public void mouseClicked(MouseEvent event) {
          
            Controller.instance().setOvalPoint(event.getPoint());
          
            if (++pointCount == 2) {
                
                pointCount = 0;
                drawingPanel.removeMouseListener(this);
                drawingPanel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
                
            }
            
        }
        
    } // end MouseHandler
    
    
} // end OvalButton
